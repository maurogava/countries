{"version":3,"sources":["hooks/useIntersection.ts","components/Image.tsx","components/InfoBox.module.scss","components/CountryDetails.module.scss","utils/utils.ts","components/InfoBox.tsx","components/CountryDetails.tsx","pages/Country.tsx"],"names":["listenerCallbacks","WeakMap","observer","handleIntersections","entries","forEach","entry","has","target","cb","get","isIntersecting","intersectionRatio","unobserve","delete","getIntersectionObserver","options","undefined","IntersectionObserver","useIntersection","ref","callback","rootMargin","threshold","root","useEffect","current","ob","set","observe","Image","alt","src","className","width","height","preload","useRef","isLoaded","setIsLoaded","useState","module","exports","insertSpaces","num","digits","str1","str2","String","split","integer","reduce","acc","char","i","arr","length","CountryDetails","number","label","cn","styles","wrapper","country","name","flags","region","subregion","capital","population","area","gini","languages","navigate","useNavigate","console","log","langs","map","language","type","backBtn","onClick","backIcon","hero","textWrapper","title","svg","image","content","boxWrapper","InfoBox","infoBox","Country","slug","useParams","fetchCountry","useCallback","fetch","then","res","json","isLoading","error","data","useQuery","refetchOnWindowFocus","Loading","countryData"],"mappings":"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","file":"static/js/4.b85a8ca9.chunk.js","sourcesContent":["import { RefObject, useEffect } from 'react'\n\nconst listenerCallbacks = new WeakMap()\n\nlet observer: IntersectionObserver\n\nfunction handleIntersections(entries: IntersectionObserverEntry[]) {\n  entries.forEach((entry) => {\n    if (listenerCallbacks.has(entry.target)) {\n      const cb = listenerCallbacks.get(entry.target)\n\n      if (entry.isIntersecting || entry.intersectionRatio > 0) {\n        observer.unobserve(entry.target)\n        listenerCallbacks.delete(entry.target)\n        cb()\n      }\n    }\n  })\n}\n\nfunction getIntersectionObserver(options: IntersectionObserverInit) {\n  if (observer === undefined) {\n    observer = new IntersectionObserver(handleIntersections, options)\n  }\n  return observer\n}\n\nconst useIntersection = (\n  ref: RefObject<Element> | false,\n  callback: VoidFunction,\n  options = {\n    rootMargin: '0px',\n    threshold: 0,\n    root: null,\n  }\n) => {\n  useEffect(() => {\n    if (!ref || !ref.current) {\n      return\n    }\n\n    const target = ref.current\n    const ob = getIntersectionObserver(options)\n\n    listenerCallbacks.set(target, callback)\n    ob.observe(target)\n\n    return () => {\n      listenerCallbacks.delete(target)\n      ob.unobserve(target)\n    }\n    // Empty array ensures that effect is only run on mount and unmount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n}\n\nexport default useIntersection\n","import { FC, useRef, useState } from 'react'\n\nimport useIntersection from 'hooks/useIntersection'\n\ntype IProps = {\n  src: string\n  width?: string\n  height?: string\n  alt?: string\n  preload?: boolean\n  className?: string\n}\n\nconst Image: FC<IProps> = ({\n  alt = '',\n  src,\n  className,\n  width,\n  height,\n  preload = false,\n}) => {\n  const ref = useRef<HTMLImageElement>(null)\n  const [isLoaded, setIsLoaded] = useState(false)\n\n  useIntersection(!preload && ref, () => setIsLoaded(true))\n\n  return (\n    <img\n      alt={alt}\n      ref={ref}\n      {...((isLoaded || preload) && { src })}\n      {...(className && { className })}\n      {...(width && { width })}\n      {...(height && { height })}\n    />\n  )\n}\nexport default Image\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"InfoBox_wrapper__3sq5T\",\"number\":\"InfoBox_number__2layP\",\"label\":\"InfoBox_label__alVG4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hero\":\"CountryDetails_hero__2LKYY\",\"textWrapper\":\"CountryDetails_textWrapper__1uhsj\",\"title\":\"CountryDetails_title__iISq4\",\"backBtn\":\"CountryDetails_backBtn__3Zewn\",\"backIcon\":\"CountryDetails_backIcon__3dyMk\",\"image\":\"CountryDetails_image__9k33F\",\"content\":\"CountryDetails_content__1gFJf\",\"language\":\"CountryDetails_language__12e3g\",\"boxWrapper\":\"CountryDetails_boxWrapper__3jQ4K\",\"infoBox\":\"CountryDetails_infoBox__3mqib\"};","export const insertSpaces = (num: number, digits: number = 3) => {\n  const [str1, str2] = String(num).split('.')\n\n  const integer = [...str1].reduce((acc, char, i, arr) => {\n    const hasSpace = (i + (digits - (arr.length % digits))) % digits === 0\n    return (acc = hasSpace ? `${acc} ${char}` : `${acc}${char}`)\n  }, '')\n\n  return integer + (str2 ? `.${str2}` : '')\n}\n","import { FC } from 'react'\nimport cn from 'classnames'\nimport { insertSpaces } from 'utils/utils'\n\nimport styles from './InfoBox.module.scss'\n\ntype InfoBoxProps = {\n  label: string\n  number?: number\n  className?: string\n}\n\nconst CountryDetails: FC<InfoBoxProps> = ({ number = 0, label, className }) => (\n  <div className={cn(styles.wrapper, className)}>\n    <div className={styles.number}>{insertSpaces(number)}</div>\n    <p className={styles.label}>{label}</p>\n  </div>\n)\n\nexport default CountryDetails\n","import { FC } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { FaArrowLeft } from 'react-icons/fa'\nimport Image from 'components/Image'\nimport InfoBox from 'components/InfoBox'\nimport { CountryDetailsProps } from 'types/countryDetails'\n\nimport styles from './CountryDetails.module.scss'\n\nconst CountryDetails: FC<{ country: CountryDetailsProps }> = ({\n  country: {\n    name,\n    flags,\n    region,\n    subregion,\n    capital,\n    population,\n    area,\n    gini,\n    languages,\n  },\n}) => {\n  const navigate = useNavigate()\n  console.log('CountryDetails')\n  const handleGoBack = () => navigate(-1)\n\n  const langs = languages.map(({ name }) => (\n    <strong key={name} className={styles.language}>\n      {name}\n    </strong>\n  ))\n\n  return (\n    <>\n      <button type=\"button\" className={styles.backBtn} onClick={handleGoBack}>\n        <FaArrowLeft className={styles.backIcon} />\n        Back\n      </button>\n\n      <div className={styles.hero}>\n        <div className={styles.textWrapper}>\n          <h1 className={styles.title}>{name}</h1>\n        </div>\n        <Image src={flags.svg} className={styles.image} />\n      </div>\n\n      <div className={styles.content}>\n        <p>\n          Capital: <strong>{capital}</strong> city\n        </p>\n        <p>Languages: {langs}</p>\n        <p>\n          Sub-region: <strong>{subregion}</strong>\n        </p>\n        <p>\n          Region: <strong>{region}</strong>\n        </p>\n        <div className={styles.boxWrapper}>\n          <InfoBox\n            number={population}\n            label=\"Population\"\n            className={styles.infoBox}\n          />\n          <InfoBox number={area} label=\"Area\" className={styles.infoBox} />\n          <InfoBox number={gini} label=\"Gini\" className={styles.infoBox} />\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default CountryDetails\n","import { FC, useCallback } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { useQuery } from 'react-query'\nimport Loading from 'components/Loading'\nimport CountryDetails from 'components/CountryDetails'\nimport { CountryDetailsProps } from 'types/countryDetails'\n\nconst Country: FC = () => {\n  const { slug } = useParams()\n\n  const fetchCountry = useCallback(\n    () =>\n      fetch(`https://restcountries.com/v2/name/${slug}`).then((res) =>\n        res.json()\n      ),\n    [slug]\n  )\n\n  const { isLoading, error, data } = useQuery<CountryDetailsProps[], Error>(\n    ['country', slug],\n    fetchCountry,\n    { refetchOnWindowFocus: false }\n  )\n\n  if (isLoading) {\n    return <Loading />\n  }\n\n  if (error || !data) {\n    return <p>An error has occurred</p>\n  }\n\n  // The API always return an Array with only one Country\n  const countryData = data[0]\n\n  return <CountryDetails country={countryData} />\n}\n\nexport default Country\n"],"sourceRoot":""}