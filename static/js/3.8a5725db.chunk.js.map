{"version":3,"sources":["hooks/useIntersection.ts","components/Image.tsx","components/CountryCard.module.scss","components/country-list/InnerCountryList.module.scss","components/country-list/Search.module.scss","components/country-list/useList.tsx","components/CountryCard.tsx","components/country-list/InnerCountryList.tsx","components/country-list/Search.tsx","components/country-list/CountryList.tsx","pages/Home.tsx"],"names":["listenerCallbacks","WeakMap","observer","handleIntersections","entries","forEach","entry","has","target","cb","get","isIntersecting","intersectionRatio","unobserve","delete","getIntersectionObserver","options","undefined","IntersectionObserver","useIntersection","ref","callback","rootMargin","threshold","root","useEffect","current","ob","set","observe","Image","alt","src","className","width","height","preload","useRef","isLoaded","setIsLoaded","useState","module","exports","ListContext","createContext","countries","results","actions","search","useListContext","useContext","ListContextProvider","children","data","setData","useCallback","value","length","tempData","filter","name","RegExp","test","providerData","useMemo","Provider","CountryCard","flags","region","to","styles","link","flagWrapper","svg","flag","textWrapper","country","detailText","CountryList","list","map","Search","memo","handleSearch","e","currentTarget","cn","wrapper","id","type","onChange","placeholder","InnerCountryList","fetchCountries","fetch","then","res","json","Home","isLoading","error","useQuery","refetchOnWindowFocus","Loading"],"mappings":"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","file":"static/js/3.8a5725db.chunk.js","sourcesContent":["import { RefObject, useEffect } from 'react'\n\nconst listenerCallbacks = new WeakMap()\n\nlet observer: IntersectionObserver\n\nfunction handleIntersections(entries: IntersectionObserverEntry[]) {\n  entries.forEach((entry) => {\n    if (listenerCallbacks.has(entry.target)) {\n      const cb = listenerCallbacks.get(entry.target)\n\n      if (entry.isIntersecting || entry.intersectionRatio > 0) {\n        observer.unobserve(entry.target)\n        listenerCallbacks.delete(entry.target)\n        cb()\n      }\n    }\n  })\n}\n\nfunction getIntersectionObserver(options: IntersectionObserverInit) {\n  if (observer === undefined) {\n    observer = new IntersectionObserver(handleIntersections, options)\n  }\n  return observer\n}\n\nconst useIntersection = (\n  ref: RefObject<Element> | false,\n  callback: VoidFunction,\n  options = {\n    rootMargin: '0px',\n    threshold: 0,\n    root: null,\n  }\n) => {\n  useEffect(() => {\n    if (!ref || !ref.current) {\n      return\n    }\n\n    const target = ref.current\n    const ob = getIntersectionObserver(options)\n\n    listenerCallbacks.set(target, callback)\n    ob.observe(target)\n\n    return () => {\n      listenerCallbacks.delete(target)\n      ob.unobserve(target)\n    }\n    // Empty array ensures that effect is only run on mount and unmount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n}\n\nexport default useIntersection\n","import { FC, useRef, useState } from 'react'\n\nimport useIntersection from 'hooks/useIntersection'\n\ntype IProps = {\n  src: string\n  width?: string\n  height?: string\n  alt?: string\n  preload?: boolean\n  className?: string\n}\n\nconst Image: FC<IProps> = ({\n  alt = '',\n  src,\n  className,\n  width,\n  height,\n  preload = false,\n}) => {\n  const ref = useRef<HTMLImageElement>(null)\n  const [isLoaded, setIsLoaded] = useState(false)\n\n  useIntersection(!preload && ref, () => setIsLoaded(true))\n\n  return (\n    <img\n      alt={alt}\n      ref={ref}\n      {...((isLoaded || preload) && { src })}\n      {...(className && { className })}\n      {...(width && { width })}\n      {...(height && { height })}\n    />\n  )\n}\nexport default Image\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"CountryCard_link__2rPbs\",\"flagWrapper\":\"CountryCard_flagWrapper__1FPA4\",\"flag\":\"CountryCard_flag__33Uas\",\"textWrapper\":\"CountryCard_textWrapper__335gi\",\"region\":\"CountryCard_region__aiwbO\",\"country\":\"CountryCard_country__2jU6F\",\"detailText\":\"CountryCard_detailText__3Sh5p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"InnerCountryList_list__64H2s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Search_wrapper__wNs1P\",\"search\":\"Search_search__2PFlA\"};","import {\n  createContext,\n  useContext,\n  useState,\n  FC,\n  useMemo,\n  useCallback,\n} from 'react'\nimport { CountryProps } from 'types/country'\n\ntype Context = {\n  countries: CountryProps[]\n  results: number\n  actions: {\n    search: (value: string) => void\n  }\n}\n\n// Context with defaults\nconst ListContext = createContext<Context>({\n  countries: [],\n  results: 0,\n  actions: {\n    search: () => {},\n  },\n})\n\nexport const useListContext = () => useContext(ListContext)\n\ntype ProviderProps = {\n  countries: CountryProps[]\n}\n\n// Context Provider\nexport const ListContextProvider: FC<ProviderProps> = ({\n  children,\n  countries,\n}) => {\n  const [data, setData] = useState(countries)\n\n  // Method to Filter the data based in the search input\n  const search = useCallback(\n    (value: string) => {\n      // If the input is empty reset the data\n      if (!value.length) {\n        setData([...countries])\n        return\n      }\n\n      // Filtering based the input value. This method is case insensitive\n      const tempData = countries.filter(({ name }) =>\n        new RegExp(value, 'i').test(name)\n      )\n      setData(tempData)\n    },\n    [countries]\n  )\n\n  const providerData = useMemo(\n    () => ({\n      countries: data,\n      results: data.length,\n      actions: {\n        search,\n      },\n    }),\n    [data, search]\n  )\n\n  return (\n    <ListContext.Provider value={providerData}>{children}</ListContext.Provider>\n  )\n}\n","import { FC } from 'react'\nimport { Link } from 'react-router-dom'\nimport Image from 'components/Image'\nimport { CountryProps } from 'types/country'\n\nimport styles from './CountryCard.module.scss'\n\nconst CountryCard: FC<CountryProps> = ({ name, flags, region }) => {\n  return (\n    <Link to={`/country-details/${name}`} className={styles.link}>\n      <div className={styles.flagWrapper}>\n        <Image src={flags.svg} alt={`${name} flag`} className={styles.flag} />\n      </div>\n      <div className={styles.textWrapper}>\n        <p className={styles.region}>{region}</p>\n        <h3 className={styles.country}>{name}</h3>\n        <p className={styles.detailText}>See country details</p>\n      </div>\n    </Link>\n  )\n}\n\nexport default CountryCard\n","import { FC } from 'react'\nimport CountryCard from 'components/CountryCard'\nimport { useListContext } from 'components/country-list/useList'\n\nimport styles from './InnerCountryList.module.scss'\n\nexport type Country = {\n  name: string\n  flags: { svg: string }\n  region: string\n}\n\nconst CountryList: FC = () => {\n  const { countries } = useListContext()\n\n  const list = countries.map(({ name, flags, region }) => (\n    <li key={name}>\n      <CountryCard name={name} flags={flags} region={region} />\n    </li>\n  ))\n\n  return <ul className={styles.list}>{list}</ul>\n}\n\nexport default CountryList\n","import { FC, ChangeEvent, useCallback, memo } from 'react'\nimport cn from 'classnames'\nimport { useListContext } from 'components/country-list/useList'\n\nimport styles from './Search.module.scss'\n\ntype SearchProps = {\n  className?: string\n}\n\nconst Search: FC<SearchProps> = memo(({ className }) => {\n  const {\n    actions: { search },\n  } = useListContext()\n\n  const handleSearch = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => search(e.currentTarget.value),\n    [search]\n  )\n\n  return (\n    <div className={cn(styles.wrapper, className)}>\n      <input\n        className={styles.search}\n        id=\"search\"\n        type=\"text\"\n        onChange={handleSearch}\n        placeholder=\"Search\"\n      />\n    </div>\n  )\n})\n\nexport default Search\n","import { FC } from 'react'\nimport { ListContextProvider } from 'components/country-list/useList'\nimport InnerCountryList from 'components/country-list/InnerCountryList'\nimport Search from 'components/country-list/Search'\nimport { CountryProps } from 'types/country'\n\nconst CountryList: FC<{ countries: CountryProps[] }> = ({ countries }) => {\n  return (\n    <ListContextProvider countries={countries}>\n      <Search />\n      <InnerCountryList />\n    </ListContextProvider>\n  )\n}\n\nexport default CountryList\n","import { FC } from 'react'\nimport { useQuery } from 'react-query'\nimport Loading from 'components/Loading'\nimport CountryList from 'components/country-list/CountryList'\nimport { CountryProps } from 'types/country'\n\nconst fetchCountries = () =>\n  fetch('https://restcountries.com/v2/all').then((res) => res.json())\n\nconst Home: FC = () => {\n  const { isLoading, error, data } = useQuery<CountryProps[], Error>(\n    'allCountries',\n    fetchCountries,\n    { refetchOnWindowFocus: false }\n  )\n\n  if (isLoading) {\n    return <Loading />\n  }\n\n  if (error || !data) {\n    return <p>An error has occurred</p>\n  }\n\n  return <CountryList countries={data} />\n}\n\nexport default Home\n"],"sourceRoot":""}